---
title: Git的基本使用
date: 2023-06-03 19:30:00 +0800
categories:
- Git
tags:
- Git
---

#### 废话
如果你是第一次使用Git工具，那么你就需要做些准备工作...（这些工作只需要配置一次，后面的Git使用不需要再次配置）

首先，你要下载安装Git工具...

“Windows”用户，戳这里[windows](https://git-scm.com/downloads)

“Linux”用户，执行 `# yum install git`

“Mac OS”用户，执行 `$ brew install git`，如果你安装了Xcode，那么就不需要单独安装Git了，Xcode自带有Git。

笔者使用的平台是“Mac OS”，下面的讲解都是基于Mac的，那么其他平台基本一样。 -，- 废话结束...

#### Git全局配置
下面我们要配置一些基本信息... 
##### 配置用户名、邮箱
``` shell
# 设置用户名
git config --global user.name "Your GitHub Name"
# 设置邮箱
git config --global user.email "Your GitHub Email"
```
“Your Github Name” 和 “Your Github Email” 替换成自己的Github用户名和Github邮箱，别傻抄！！！

##### 生成SSH RSA加密 建立远程身份验证
这个步骤很重要，你的本地仓库能否连接到远程仓库全靠这个来验证身份的！

``` shell
# 生成RSA加密后的SHH密文
ssh-keygen -t rsa -C "Your GitHub Email"
```

执行后根据提示找到“id_rsa.pub”文件，秘钥就在里面。将公钥添加至GitHub账户即可。

![Github账户添加SSH_Key](/images/2023-6-3-Git基本使用/Add-SSH_Key.png)

到这里我们就配置好了，下面测试下配置的SSH是否正常。
``` shell
# 验证通讯
ssh -T git@github.com
# 执行后看到“successfully”表示OK
```

![测试SSH是否绑定成功](./images/2023-6-3-Git基本使用/Test_SSH.png)

全局配置工作大功告成，下面讲解下Git基本用法...

#### Git基本使用
在讲解这部分内容前首先要理解个基本概念。

我们通常使用Git无非就是将本地文件上传到Github托管或者将Github仓库中的文件拉取到本地。

工作流程是这样的，首先你要有一个本地仓库（其实就是你电脑上的某个文件夹），然后通过Git将本地仓库上传到Github远程仓库，那么这个上传过程我们称之为`push`，别着急，在我们“push”之前我们需要创建个本地仓库...

##### 初始化本地仓库
我们来创建个本地仓库~~~ 

在你的电脑磁盘上的任意你认为合适的位置创建一个文件夹（刚刚我说了本地仓库其实就是一个文件夹），名字无所谓了，尽量使用英文命名（英文菜的话拼音也可以...）

接下来我们来变个魔术...将刚刚创建的文件夹变成本地仓库...这个过程我们称之为`初始化本地仓库`

1. 打开终端，使用“cd”命令进入刚刚创建的文件夹...（cd命令不会使用的话请自行Google）`cd xxx/xxx`
2. 键入如下命令:
``` shell
# 初始化本地仓库
git init
```
注意此命令执行后没有任何提示...（没有任何提示也许就是最好的结果吧...）此时你的文件夹中会创建一个名字叫`.git`的**隐藏文件夹**，现在你的文件夹就是一个本地仓库了...

##### 提交文件
这个步骤我们就可以选择我们需要上传的文件~~~（虽然叫做提交文件，但是这个过程并不是push过程，可以理解为将我们要push的内容先提交到“缓存区”中，这个“缓存区”中的内容就是稍后我们要push的内容）

``` shell
# 提交单个文件
git add xxx
# 提交本地仓库中的所有文件
git add .
# 提交本地仓库中的所有文件 也可以这样写
git add -A .
```
根据自己的实际需求执行上面的命令...（不要重复执行了...）

此时我们的“缓存区”中就有内容了... 别急，此时我们还不能直接push...

我们还需要给“缓存区”中的每个文件加个说明（可以理解为备注）

``` shell
# 提交备注
git commit -m "备注信息"
```

这个备注信息是什么呢，一起来看下~~~

![备注显示位置](./images/2023-6-3-Git基本使用/Github_commit.png)

明白了吧...

##### push前的准备工作
准备push前，我们需要连接远程仓库，刚刚所有的操作都是在本地进行的。（这个过程第一次提交时执行，后续提交就不需要了）

``` shell
# 连接远程仓库
git remote add origin 远程仓库的SSH地址
```

##### push
``` shell
# 不想啰嗦了... 
# 将“缓存区”中的文件push到远程仓库
git push -u origin 分支
# 上面的命令第一次push需要这么做 后续push可直接执行一下面命令
git push
```
至于上面命令中的“分支” 如果是新仓库的话直接写`main`即可(`main`是目前版本的默认分支，一般都会自动创建如果没有也可以执行`git branch -M main`这个命令手动创建，老版本中默认分支是`master`。现在没有了，默认的都是`main`)，“分支”这个概念比较多，本篇就不展开说了，有机会再写篇文章来介绍~~~

好了，此时就完成了基本的上传...刷新你的Github仓库页面就能看到了~~~

#### 常见错误处理
push操作并不是每次都能”一帆风顺“...说下最常见的报错。

``` shell
error: failed to push some refs to 'github.com:Altman-fei/altman-fei.github.io.git'
```

如果你在执行push命令后，出现上面的报错信息，别慌！我来给你解决！

Err原因：由于使用了在线修改仓库（没有通过git来修改仓库内容，而是使用Github直接修改），导致远程仓库与本地仓库内容不匹配。

解决方案：
1. 将远程仓库`clone`下来...（clone命令自行Google，很简单，很简单，很简单）
2. `pull`命令
``` shell
git pull --rebase origin "项目分支"
```

**命令解释：**
先取消`commit记录`，并且把它们临时保存为补丁(patch)(这些补丁放到".git/rebase"目录中)，之后同步远程库到本地，最后`合并补丁`到本地库之中。

执行完`git pull --rebase origin "项目分支"`命令后就可以直接`git push`了....

码了这么久累了...我们下篇文章见~~~ Bye!

